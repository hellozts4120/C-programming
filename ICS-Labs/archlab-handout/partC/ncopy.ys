#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# 14307110190 Tianshu Zhou
#
# 1. Using iaddq instruction, as it's combination of two instructions so we can reduce cycles.
#    Otherwise the code will add a register with a constant for many times.
# 2. Loop Unrolling for 8x, using jump table
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion

HeaderA:
    xorq %rax, %rax   # count = 0;
    iaddq $-7, %rdx
    andq %rdx,%rdx
    jle HeaderB   # len <= 7, goto HeaderB
    
LoopA:
    mrmovq (%rdi), %r8    # read from src
    mrmovq 8(%rdi), %r9
    mrmovq 16(%rdi), %r10
    mrmovq 24(%rdi), %r11
    mrmovq 32(%rdi), %r12
    mrmovq 40(%rdi), %r13
    mrmovq 48(%rdi), %r14
    mrmovq 56(%rdi), %rbx
    rmmovq %r8, (%rsi)    # store to dst
    rmmovq %r9, 8(%rsi)
    rmmovq %r10, 16(%rsi)
    rmmovq %r11, 24(%rsi)
    rmmovq %r12, 32(%rsi)
    rmmovq %r13, 40(%rsi)
    rmmovq %r14, 48(%rsi)
    rmmovq %rbx, 56(%rsi)
    andq %r8, %r8		# val <= 0?
    jle Npos1
    iaddq $1, %rax		# count++
    
Npos1:
    iaddq $64, %rdi
    iaddq $64, %rsi
    andq %r9, %r9
    jle Npos2
    iaddq $1, %rax
    
Npos2:
    andq %r10, %r10
    jle Npos3
    iaddq $1, %rax

Npos3:
    andq %r11, %r11
    jle Npos4
    iaddq $1, %rax

Npos4:
    andq %r12, %r12
    jle Npos5
    iaddq $1, %rax

Npos5:
    andq %r13, %r13
    jle Npos6
    iaddq $1, %rax

Npos6:
    andq %r14, %r14
    jle Npos7
    iaddq $1, %rax

Npos7:
    andq %rbx, %rbx
    jle Npos8
    iaddq $1, %rax
    
Npos8:
    iaddq $-8, %rdx
    jg LoopA

HeaderB:
    addq %rdx, %rdx
    addq %rdx, %rdx
    addq %rdx, %rdx
    mrmovq Table(%rdx), %rdx
    pushq %rdx
    jmp Done
    
t7:
    mrmovq 48(%rdi), %r14
    rmmovq %r14, 48(%rsi)
    andq %r14, %r14
    jle t6
    iaddq $1, %rax
    
t6:
    mrmovq 40(%rdi), %r13
    rmmovq %r13, 40(%rsi)
    andq %r13, %r13
    jle t5
    iaddq $1, %rax

t5:
    mrmovq 32(%rdi), %r12
    rmmovq %r12, 32(%rsi)
    andq %r12, %r12
    jle t4
    iaddq $1, %rax

t4:
    mrmovq 24(%rdi), %r11
    rmmovq %r11, 24(%rsi)
    andq %r11, %r11
    jle t3
    iaddq $1, %rax

t3:
    mrmovq 16(%rdi), %r10
    rmmovq %r10, 16(%rsi)
    andq %r10, %r10
    jle t2
    iaddq $1, %rax

t2:	
    mrmovq 8(%rdi), %r9
    rmmovq %r9, 8(%rsi)
    andq %r9, %r9
    jle t1
    iaddq $1, %rax
    
t1:
    mrmovq (%rdi), %r8
    rmmovq %r8, (%rsi)
    andq %r8, %r8
    jle Done
    iaddq $1, %rax
    

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret

.align 8
Tb:
        .quad Done
        .quad t1
        .quad t2
        .quad t3
        .quad t4
        .quad t5
        .quad t6
Table:  .quad t7


##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */